name: CI

on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        os:
          - windows-2019
        VSDEVCMD_BAT:
          - "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\Common7\\Tools\\VsDevCmd.bat"
        DEVENV:
          - "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\Common7\\IDE"
        MSBUILD:
          - "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Current\\Bin"
        NMAKE:
          - "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Tools\\MSVC\\14.29.30133\\bin\\Hostx64\\x64"
        RC:
          - "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\SDK\\ScopeCppSDK\\vc15\\SDK\\\bin"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: alex-sandri/nothing-action@v1
      - name: Set env vars
        if: ${{ matrix.os == 'windows-2019' }}
        shell: cmd
        run: |
          echo "${{ matrix.DEVENV }}" >> $GITHUB_PATH
          echo "${{ matrix.MSBUILD }}" >> $GITHUB_PATH
          echo "${{ matrix.NMAKE }}" >> $GITHUB_PATH
          echo "${{ matrix.RC }}" >> $GITHUB_PATH
          echo on
          echo "$PATH"
      - uses: actions/checkout@v4
      - name: Windows Build
        if: ${{ matrix.os == 'windows-2019' }}
        shell: cmd
        run: |
          echo %PATH%
          ::zlib
          curl -fsSL -o zlib.tar.gz https://github.com/madler/zlib/archive/v1.2.8.tar.gz
          7z x zlib.tar.gz -so | 7z x -si -ttar > nul
          move zlib-1.2.8 zlib
          cd zlib
          cmake .
          cmake --build .
          cd ..
            ::libJPEG
          curl -fsSL -o libjpeg.tar.gz https://github.com/libjpeg-turbo/libjpeg-turbo/archive/2.0.4.tar.gz
          tar xzf libjpeg.tar.gz
          move libjpeg-turbo-2.0.4 libjpeg
          cd libjpeg
          cmake .
          cmake --build .
          cd ..
          ::libPNG
          curl -fsSL -o libpng.tar.gz http://prdownloads.sourceforge.net/libpng/libpng-1.6.28.tar.gz?download
          7z x libpng.tar.gz -so | 7z x -si -ttar > nul
          move libpng-1.6.28 libpng
          cd libpng
          cmake . -DZLIB_INCLUDE_DIR=..\zlib -DZLIB_LIBRARY=..\zlib\debug\zlibstaticd.lib
          cmake --build .
          cd ..
          ::Berkeley DB - required by SASL
          curl -fsSL -o db-4.1.25.tar.gz http://download.oracle.com/berkeley-db/db-4.1.25.tar.gz
          7z x db-4.1.25.tar.gz -so | 7z x -si -ttar > nul
          move db-4.1.25 db
          cd db\build_win32
          echo using ${{ matrix.DEVENV }} 
          devenv db_dll.dsp /upgrade
          msbuild /p:Configuration=Release db_dll.vcxproj
          cd ..\..
          ::Cyrus SASL
          curl -fsSL -o cyrus-sasl-2.1.26.tar.gz https://github.com/cyrusimap/cyrus-sasl/releases/download/cyrus-sasl-2.1.26/cyrus-sasl-2.1.26.tar.gz
          7z x cyrus-sasl-2.1.26.tar.gz -so | 7z x -si -ttar > nul
          move cyrus-sasl-2.1.26 sasl
          cd sasl
          patch -p1 -i ..\deps\sasl-fix-snprintf-macro.patch
          echo using vsdevcmd ${{ matrix.VSDEVCMD_BAT }}
          '${{ matrix.VSDEVCMD_BAT }}'
          nmake /f NTMakefile OPENSSL_INCLUDE=c:\OpenSSL-Win32\include OPENSSL_LIBPATH=c:\OpenSSL-Win32\lib DB_INCLUDE=c:\projects\libvncserver\deps\db\build_win32 DB_LIBPATH=c:\projects\libvncserver\deps\db\build_win32\release DB_LIB=libdb41.lib install
          cd ..
          ::go back to source root
          cd ..
          ::build_script:
          mkdir build
          cd build 
          cmake --version
          cmake .. -DZLIB_INCLUDE_DIR=..\deps\zlib -DZLIB_LIBRARY=..\deps\zlib\debug\zlibstaticd.lib -DJPEG_INCLUDE_DIR=..\deps\libjpeg -DJPEG_LIBRARY_DEBUG=..\deps\libjpeg\debug\turbojpeg-static.lib -DPNG_PNG_INCLUDE_DIR=..\deps\libpng -DPNG_LIBRARY=..\deps\libpng\debug\libpng16_staticd.lib -D SASL2_INCLUDE_DIR=c:\cmu\include -D LIBSASL2_LIBRARIES=c:\cmu\lib\libsasl.lib ..
          cmake --build .
          ECHO %cd%
          echo "current dir %cd%"
          ::ctest -C Debug --output-on-failure
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: |
            "${{ github.workspace }}\\build"
